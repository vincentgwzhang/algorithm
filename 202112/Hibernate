Hibernate中get和load有什么不同之处? 

Get 方法， 在缓存中没有找到相应的对象，get将会直接访问数据库并返回一个完全初始化好的对象，而这个过程有可能会涉及到多个数据库调用；
load方法,  在缓存中没有发现对象的情况下，只会返回一个代理对象，只有在对象getId()之外的其它方法被调用时才会真正去访问数据库，这样就能在某些情况下大幅度提高性能。

==========================================================================================================================================================

Hibernate中save、persist和saveOrUpdate这三个方法的不同之处？

1, save()只能INSERT记录，返回值是一个Serializable对象
2, saveOrUpdate()可以进行 记录的INSERT和UPDATE。
3, persist()方法返回值为void

==========================================================================================================================================================


Hibernate中transient、persistent、detached对象三者之间有什么区别？ 

在Hibernate中，对象具有三种状态：transient、persistent和detached。
1) 同Hibernate的session有关联的对象是persistent对象。

2) 当下却没有关联关系了，这样的对象就是detached的对象。
调用 update() / saveOrUpdate()方法，重新将该detached对象同相应的seesion建立关联关系

3) Transient对象指的是新建的持久化类的实例，它还从未同Hibernate的任何Session有过关联关系。
调用persist() / save()方法，将transient对象变成persistent对象。


Java JPA 只是一个规范，通常用 Hibernate / Mybatis 去实现数据持久性


******************************************************************************************************
GenerationType, JPA提供的四种标准用法为: TABLE,SEQUENCE,IDENTITY,AUTO.

TABLE：使用一个特定的数据库表格来保存主键。
SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。
IDENTITY：主键由数据库自动生成（主要是自动增长型）
AUTO：主键由程序控制。

@Id
@GeneratedValue(strategy = GenerationType.AUTO)
private int deskId;
******************************************************************************************************


@ManyToOne(fetch = FetchType.LAZY)
@JoinColumn(name="ih_ihs_id", nullable=false)
private ImportHistorySummaryEntity importHistorySummary;/////////////////// 注意了，这两个刚好关联

@ElementCollection(fetch= FetchType.LAZY)
@OneToMany(mappedBy="importHistorySummary", fetch= FetchType.LAZY)
private Set<ImportHistoryEntity> importHistoryEntities;//////////////////// 注意了，这两个刚好关联

@OneToOne
@JoinColumn(name="ipc_ip_id", nullable=false, unique=true)
private ImportProductEntity importProduct;

@ManyToMany
@JoinTable(name="menu_item_to_import_product",
        joinColumns=@JoinColumn(name="mitip_mi_id", referencedColumnName="mi_id"),
        inverseJoinColumns=@JoinColumn(name="mitip_ip_id", referencedColumnName="ip_id"))
private List<ImportProductEntity> importProducts;