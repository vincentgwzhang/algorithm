@Spy 和 @Mock 是相反的， @Spy 会调用真的函数，除非用了 when. .....

class ExampleService {
    int add(int a, int b) {
        return a+b;
    }
}

public class MockitoDemo {
    @Test
    public void test_spy() {
        ExampleService spyExampleService = spy(new ExampleService());
        Assert.assertEquals(3, spyExampleService.add(1, 2));// 默认会走真实方法

        when(spyExampleService.add(1, 2)).thenReturn(10);//// 打桩后，不会走了
        Assert.assertEquals(10, spyExampleService.add(1, 2));

        Assert.assertEquals(3, spyExampleService.add(2, 1));// 但是参数比匹配的调用，依然走真实方法
    }
}


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

Cache-control is an HTTP header used to specify browser caching policies in both client requests and server responses.
Policies include how a resource is cached,
where it’s cached and its maximum age before expiring (i.e., time to live).


Cache-Control: Max-Age
cache-control: max-age=120 客户端不愿意接受age超过这个值的缓存。并且不接受过期缓存，除非max-stale存在。

Cache-Control: No-Cache 无论缓存是否过期，都要对请求进行校验
The no-cache directive means that a browser may cache a response, but must first submit a validation request to an origin server.

Cache-Control: No-Store

Cache-Control: Public

Cache-Control: Private

====================================================================================
首先从继承方面来说，Error和Exception都是Throwable的子类。


Error类：就是程序运行时候抛出的最严重级别的错误了，如VirtualMachineError，ThreadDeath。
抛出了Error的程序从Java设计的角度来讲，程序基本不可以通过后续代码修复，从而理应终止。